### 什么是批处理
  - 说明： 
    react将多个状态更新组合程单个新渲染， 获得更好得性能。（白话： 将多个setstate结合， react18前setstate合并只在同步，在异步中不会合并。）
  - React 18的createRoot，使用了createRoot说明更新会自动批处理
    + ps: 手动批处理库unstable_batchedUpdates
    + eg.
    ``` function handleClick() {
      fetchSomething().then(() => {
        unstable_batchedUpdates(()=>{
          setCount((c) => c + 1);
          setFlag((f) => !f);
        })
      });
    }
    ```
    + 不做批处理ReactDOM.flushSync()
    +eg.
    ```
    function handleClick() {
     flushSync(() => {
       setCounter(c => c + 1);
     });
     console.log('渲染了第1次')
     flushSync(() => {
       setFlag(f => !f);
     });
     console.log('渲染了第2次')
    }
    ```
react17 18 区别
1.
```
17/
function handleClick() {
  setCount((c) => c + 1); // Does not re-render yet
  setFlag((f) => !f); // Does not re-render yet
  // React will only re-render once at the end (that's batching!)
}
18/
fetchSomething().then(() => {
  // React 17 and earlier does NOT batch these because
  // they run *after* the event in a callback, not *during* it
  setCount((c) => c + 1); // Causes a re-render
  setFlag((f) => !f); // Causes a re-render
});
```
理解： 
  执行更新事件，
  分发action时候存在获取lane和fiber的操作，并且，根据lane会去 scheduleUpdateOnFiber 进行fiber的调度更新
  
#### 总结
  升级到react18时，有以下更新:
    自动批处理建立在使用createRoot的前提
    通过flushSync在setState之间读取状态时解决批处理问题
    影响:在 timeouts, promises, native event处理程序或任何其他事件内的更新将以与在React事件内的更新相同的方式批处理，而在react17中默认不这样
    谨慎使用unstable_batchedUpdates
